//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace rody_sys.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Rody_DBEntities3 : DbContext
    {
        public Rody_DBEntities3()
            : base("name=Rody_DBEntities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<agent> agent { get; set; }
        public virtual DbSet<area> area { get; set; }
        public virtual DbSet<banks> banks { get; set; }
        public virtual DbSet<client> client { get; set; }
        public virtual DbSet<client_type> client_type { get; set; }
        public virtual DbSet<delegator> delegator { get; set; }
        public virtual DbSet<govern> govern { get; set; }
        public virtual DbSet<main_category_supplier> main_category_supplier { get; set; }
        public virtual DbSet<notes> notes { get; set; }
        public virtual DbSet<operations_client> operations_client { get; set; }
        public virtual DbSet<operations_store> operations_store { get; set; }
        public virtual DbSet<operations_supplier> operations_supplier { get; set; }
        public virtual DbSet<partner> partner { get; set; }
        public virtual DbSet<phones> phones { get; set; }
        public virtual DbSet<purchases> purchases { get; set; }
        public virtual DbSet<reportClientTahseel> reportClientTahseel { get; set; }
        public virtual DbSet<sales> sales { get; set; }
        public virtual DbSet<services> services { get; set; }
        public virtual DbSet<shareha> shareha { get; set; }
        public virtual DbSet<stores> stores { get; set; }
        public virtual DbSet<sub_category_supplier> sub_category_supplier { get; set; }
        public virtual DbSet<supplier> supplier { get; set; }
        public virtual DbSet<adminOperations> adminOperations { get; set; }
        public virtual DbSet<admins> admins { get; set; }
    
        public virtual int add_operation_supplier_give(Nullable<int> supId, Nullable<double> getval, Nullable<System.DateTime> dat)
        {
            var supIdParameter = supId.HasValue ?
                new ObjectParameter("supId", supId) :
                new ObjectParameter("supId", typeof(int));
    
            var getvalParameter = getval.HasValue ?
                new ObjectParameter("getval", getval) :
                new ObjectParameter("getval", typeof(double));
    
            var datParameter = dat.HasValue ?
                new ObjectParameter("dat", dat) :
                new ObjectParameter("dat", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("add_operation_supplier_give", supIdParameter, getvalParameter, datParameter);
        }
    
        public virtual int add_store_operation_sup(Nullable<int> supId, Nullable<int> storeId, Nullable<double> giveval, Nullable<System.DateTime> dat)
        {
            var supIdParameter = supId.HasValue ?
                new ObjectParameter("supId", supId) :
                new ObjectParameter("supId", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var givevalParameter = giveval.HasValue ?
                new ObjectParameter("giveval", giveval) :
                new ObjectParameter("giveval", typeof(double));
    
            var datParameter = dat.HasValue ?
                new ObjectParameter("dat", dat) :
                new ObjectParameter("dat", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("add_store_operation_sup", supIdParameter, storeIdParameter, givevalParameter, datParameter);
        }
    
        public virtual int call_add_new_give_supplier(Nullable<int> supId, Nullable<int> storeId, Nullable<double> getValue, string date)
        {
            var supIdParameter = supId.HasValue ?
                new ObjectParameter("supId", supId) :
                new ObjectParameter("supId", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var getValueParameter = getValue.HasValue ?
                new ObjectParameter("getValue", getValue) :
                new ObjectParameter("getValue", typeof(double));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("call_add_new_give_supplier", supIdParameter, storeIdParameter, getValueParameter, dateParameter);
        }
    
        public virtual int decrease_charge_of_store(Nullable<int> storeId, Nullable<double> val)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var valParameter = val.HasValue ?
                new ObjectParameter("val", val) :
                new ObjectParameter("val", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("decrease_charge_of_store", storeIdParameter, valParameter);
        }
    
        public virtual int decrease_charge_of_supplier(Nullable<int> sId, Nullable<double> value)
        {
            var sIdParameter = sId.HasValue ?
                new ObjectParameter("sId", sId) :
                new ObjectParameter("sId", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("decrease_charge_of_supplier", sIdParameter, valueParameter);
        }
    }
}
